<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Activity xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:maes="clr-namespace:Microsoft.Activities.Extensions.Statements;assembly=Microsoft.Activities.Extensions" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" mc:Ignorable="sap sap2010">
    <TextExpression.NamespacesForImplementation>
        <sco:Collection x:TypeArguments="x:String">
            <x:String>UiPath.Core</x:String>
            <x:String>UiPath.Core.Activities</x:String>
            <x:String>System</x:String>
            <x:String>System.Collections.Generic</x:String>
            <x:String>System.Text.RegularExpressions</x:String>
            <x:String>System.Linq</x:String>
        </sco:Collection>
    </TextExpression.NamespacesForImplementation>
    <x:Members>
        <x:Property Name="row" Type="InArgument(x:String)"/>
        <x:Property Name="column" Type="InArgument(x:String)"/>
    </x:Members>
    <Sequence DisplayName="Main Sequence">
        <Sequence.Variables>
            <Variable Name="currentBrowser" x:TypeArguments="ui:Browser"/>
            <Variable Name="dataTable" x:TypeArguments="sd:DataTable"/>
            <Variable Name="transformed_value" x:TypeArguments="x:String"/>
            <Variable Default="[New List(Of String)]" Name="cells" x:TypeArguments="scg:List(x:String)"/>
            <Variable Name="clipboard" x:TypeArguments="x:String"/>
            <Variable Name="source" x:TypeArguments="x:String"/>
            <Variable Name="target" x:TypeArguments="x:String"/>
            <Variable Name="prevTarget" x:TypeArguments="x:String"/>
            <Variable Name="FD" x:TypeArguments="scg:Dictionary(x:String, x:String)">
                <Variable.Default>
                    <mva:VisualBasicValue ExpressionText="new Dictionary(of String, String) from {{&quot;&quot;,&quot;on&quot;},{&quot;Hungary&quot;,&quot;+36&quot;},{&quot;United States&quot;,&quot;+12&quot;},{&quot;Japan&quot;,&quot;+81&quot;},{&quot;Ukraine&quot;,&quot;+380&quot;},{&quot;United Kingdom&quot;,&quot;+44&quot;},{&quot;Kazakhstan&quot;,&quot;+7&quot;},{&quot;Portugal&quot;,&quot;+351&quot;},{&quot;Spain&quot;,&quot;+34&quot;},{&quot;Russia&quot;,&quot;+7&quot;},{&quot;New Zealand&quot;,&quot;+64&quot;},{&quot;Canada&quot;,&quot;+11&quot;},{&quot;Netherlands&quot;,&quot;+31&quot;},{&quot;South Korea&quot;,&quot;+82&quot;},{&quot;Sweden&quot;,&quot;+46&quot;},{&quot;Czech Republic&quot;,&quot;+420&quot;},{&quot;Norway&quot;,&quot;+47&quot;},{&quot;China&quot;,&quot;+86&quot;},{&quot;Ireland&quot;,&quot;+353&quot;},{&quot;Finland&quot;,&quot;+358&quot;},{&quot;Poland&quot;,&quot;+48&quot;},{&quot;Italy&quot;,&quot;+39&quot;},{&quot;France&quot;,&quot;+33&quot;},{&quot;Germany&quot;,&quot;+49&quot;},{&quot;Croatia&quot;,&quot;+385&quot;}}" x:TypeArguments="scg:Dictionary(x:String, x:String)"/>
                </Variable.Default>
            </Variable>
            <Variable Name="valuePerIndex" x:TypeArguments="scg:Dictionary(x:String, x:String)">
                <Variable.Default>
                    <mva:VisualBasicValue ExpressionText="new Dictionary(of String, String)" x:TypeArguments="scg:Dictionary(x:String, x:String)"/>
                </Variable.Default>
            </Variable>
        </Sequence.Variables>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;A&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">A</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:OpenBrowser BrowserType="Chrome" DisplayName="Open" Hidden="False" NewSession="True" Private="False" UiBrowser="[currentBrowser]" Url="https://forms.zoho.com/universityofmelbourne/form/NewRecord">
            <ui:OpenBrowser.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:OpenBrowser.Body>
        </ui:OpenBrowser>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">SingleLine</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="A">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;t[0] = t[0] + &quot; &quot; + t[1];&#xD;&#xA;t.RemoveAt(1);&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="B">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='SingleLine' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="2" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;B&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">B</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">SingleLine</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="A">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;t[0] = t[0] + &quot; &quot; + t[1];&#xD;&#xA;t.RemoveAt(1);&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="B">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='SingleLine' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="5" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;C&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">C</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">date</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;split = t[0].Split(&apos;/&apos;);&#xD;&#xA;t.RemoveAt(0);&#xD;&#xA;t.InsertRange(0, split);&#xD;&#xA;t[1] = t[1] + &quot;-&quot; + t[2];&#xD;&#xA;t.RemoveAt(2);&#xD;&#xA;t[0] = t[0] + &quot;-&quot; + t[1];&#xD;&#xA;t.RemoveAt(1);&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="C">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='date' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="8" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;D&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">D</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">PhoneNumber</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;split = t[0].Split(&apos; &apos;);&#xD;&#xA;t[0] = split[0];&#xD;&#xA;t.Insert(1, String.Join(&quot; &quot;, split.Skip(1).Take(split.Length - 1)).Trim());&#xD;&#xA;t.RemoveAt(0);&#xD;&#xA;t[0] = t[0].Trim();&#xD;&#xA;split = t[0].Split(&apos; &apos;);&#xD;&#xA;t.RemoveAt(0);&#xD;&#xA;t.InsertRange(0, split);&#xD;&#xA;t[1] = t[1] + &quot;-&quot; + t[2];&#xD;&#xA;t.RemoveAt(2);&#xD;&#xA;t[0] = t[0] + &quot;-&quot; + t[1];&#xD;&#xA;t.RemoveAt(1);&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="D">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='countrycode' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="11" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;E&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">E</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">Email</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="E">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='Email' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="14" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:ExcelApplicationScope DisplayName="Excel Application compilator.scope.Scope" WorkbookPath="StudentRecords.xlsx">
            <ui:ExcelApplicationScope.Body>
                <ActivityAction x:TypeArguments="ui:WorkbookApplication">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ExcelWorkbookScope" x:TypeArguments="ui:WorkbookApplication"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <ui:ExcelReadCell Cell="[&quot;F&quot; + row]" DisplayName="Read Cell" SheetName="Sheet1">
                            <ui:ExcelReadCell.Result>
                                <OutArgument x:TypeArguments="x:String">[clipboard]</OutArgument>
                            </ui:ExcelReadCell.Result>
                        </ui:ExcelReadCell>
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[source]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">F</InArgument>
                            </Assign.Value>
                        </Assign>
                    </Sequence>
                </ActivityAction>
            </ui:ExcelApplicationScope.Body>
        </ui:ExcelApplicationScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do"/>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
        <ui:BrowserScope Browser="[currentBrowser]" BrowserType="Chrome" DisplayName="Attach Browser Chrome">
            <ui:BrowserScope.Body>
                <ActivityAction x:TypeArguments="x:Object">
                    <ActivityAction.Argument>
                        <DelegateInArgument Name="ContextTarget" x:TypeArguments="x:Object"/>
                    </ActivityAction.Argument>
                    <Sequence DisplayName="Do">
                        <Assign>
                            <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[target]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                                <InArgument x:TypeArguments="x:String">SingleLine1</InArgument>
                            </Assign.Value>
                        </Assign>
                        <Switch DisplayName="Source Switch" Expression="[source]" x:TypeArguments="x:String">
                            <ui:InvokeCode Code="List&lt;string&gt; t = new List&lt;string&gt;();&#xD;&#xA;if (target.Equals(prevTarget)){&#xD;&#xA;   t.Add(transformed_value);&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;} else {&#xD;&#xA;   prevTarget = target;&#xD;&#xA;   t.Add(clipboard);&#xD;&#xA;}&#xD;&#xA;transformed_value = String.Concat(t.ToArray());&#xD;&#xA;" Language="CSharp" x:Key="F">
                                <ui:InvokeCode.Arguments>
                                    <InArgument x:Key="clipboard" x:TypeArguments="x:String">[clipboard]</InArgument>
                                    <InArgument x:Key="split" x:TypeArguments="s:String[]"/>
                                    <InArgument x:Key="cells" x:TypeArguments="scg:List(x:String)">[cells]</InArgument>
                                    <InOutArgument x:Key="transformed_value" x:TypeArguments="x:String">[transformed_value]</InOutArgument>
                                    <InOutArgument x:Key="prevTarget" x:TypeArguments="x:String">[prevTarget]</InOutArgument>
                                    <InOutArgument x:Key="target" x:TypeArguments="x:String">[target]</InOutArgument>
                                </ui:InvokeCode.Arguments>
                            </ui:InvokeCode>
                        </Switch>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[transformed_value]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='SingleLine1' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="17" Value="[transformed_value]" x:TypeArguments="x:String, x:String"/>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[FD.Item(valuePerIndex.Item(&quot;17&quot;))]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='Address_ZipCode' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="18" Value="[FD.Item(valuePerIndex.Item(&quot;17&quot;))]" x:TypeArguments="x:String, x:String"/>
                        <ui:Check Action="Check" DisplayName="Check">
                            <ui:Check.Target>
                                <ui:Target Selector="&lt;webctrl id='DecisionBox' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:Check.Target>
                        </ui:Check>
                        <ui:TypeInto Activate="True" ClickBeforeTyping="False" DelayBefore="0" DelayBetweenKeys="0" DelayMS="0" DisplayName="Type Into 'INPUT'" EmptyField="False" SendWindowMessages="False" SimulateType="True" Text="[&quot;on&quot;]">
                            <ui:TypeInto.Target>
                                <ui:Target Selector="&lt;webctrl name='DecisionBox' tag='INPUT' /&gt;" WaitForReady="COMPLETE"/>
                            </ui:TypeInto.Target>
                        </ui:TypeInto>
                        <maes:AddToDictionary Dictionary="[valuePerIndex]" DisplayName="Add to dictionary" Key="20" Value="[&quot;on&quot;]" x:TypeArguments="x:String, x:String"/>
                        <ui:Click ClickType="CLICK_SINGLE" DisplayName="Click BUTTON" KeyModifiers="None" MouseButton="BTN_LEFT" SendWindowMessages="False" SimulateClick="True">
                            <ui:Click.Target>
                                <ui:Target Selector="&lt;webctrl innerText=' Submit ' tag='BUTTON'/&gt;" WaitForReady="COMPLETE"/>
                            </ui:Click.Target>
                        </ui:Click>
                    </Sequence>
                </ActivityAction>
            </ui:BrowserScope.Body>
        </ui:BrowserScope>
    </Sequence>
</Activity>
